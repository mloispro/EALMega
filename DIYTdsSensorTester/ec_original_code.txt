#include <LiquidCrystal.h>

// temp variables 

// which analog pin to connect
#define THERMISTORPIN A5         
// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000      
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25   
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 5
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000  

int samples[NUMSAMPLES];


// conductivity variables

long pulseCount = 0;  //a pulse counter variable

unsigned long pulseTime,lastTime, duration, totalDuration;

int samplingPeriod=2; // the number of seconds to measure 555 oscillations

int ecPowerPin = 11; // the pin that powers the 555 subcircuit

//lcd
LiquidCrystal lcd(8, 9, 4, 5, 6, 7); 

//testing
#define alphaLTC 0.022 // Temperature correction coefficient

#define X0 0.00   //  The conductivity probe is dry
#define X1 2.00   //  Value of calibration buffers
#define X2 12.88  //  You can use any other buffers
#define X3 80.00  //  and their number
int Y0 = 230;
int Y1 = 1340;
int Y2 = 4140;
int Y3 = 7350;
float Temp, EC;
float total;
float TempManual = 25.0;
float Volts = 5.0;
int _tdsPin = 3;//1;//#3

void setup()
{
  Serial.begin(57600);
  
  pinMode(ecPowerPin, OUTPUT);   
  lcd.begin(16, 2);
  
  // Print a message to the LCD.
  lcd.print("hello, world!");
           
}

void lcdPrintLine(int lineNum, String text){
  lcd.setCursor(0, lineNum);
  // print the number of seconds since reset:
  lcd.print(text);
}

void loop()
{
  
   uint8_t i;
  float average;
  
  
  delay(1000); // imagine riffle is doing other stuff (like sleeping)
  
  // now make a conductivity measurement
  
    //turn on the 555 system
  digitalWrite(ecPowerPin,HIGH); //turns on the 555 timer subcircuit
  
  // temperature ---------------------------------------------
 
 
  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   int tempReading = analogRead(THERMISTORPIN);
   samples[i] = tempReading;
   delay(10);
  }
  
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
     average += samples[i];
  }
  average /= NUMSAMPLES;
 
  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;
  //Serial.print("Thermistor resistance "); 
  //Serial.println(average);
 
  float steinhart;
  steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                 // Invert
  steinhart -= 273.15;                         // convert to C
 
  Serial.print(steinhart);
  Serial.println(" *C");
  
  
  // conductivity --------------------------------------
  
    //todo: remove
  //for (i=0; i< NUMSAMPLES; i++) {
  //   int ecReading = analogRead(A4);
 //   Serial.print("ecReading: ");
  //  Serial.println(ecReading);
  //  delay(100);
  //}
  
  pulseCount=0; //reset the pulse counter
  totalDuration=0;  //reset the totalDuration of all pulses measured
  
  
  attachInterrupt(digitalPinToInterrupt(_tdsPin),onPulse,RISING); //attach an interrupt counter to interrupt pin 1 (digital pin #3) -- the only other possible pin on the 328p is interrupt pin #0 (digital pin #2)
  //attachInterrupt(1,onPulse,RISING);
  
  pulseTime=micros(); // start the stopwatch
  
  delay(samplingPeriod*1000); //give ourselves samplingPeriod seconds to make this measurement, during which the "onPulse" function will count up all the pulses, and sum the total time they took as 'totalDuration' 
 
  detachInterrupt(digitalPinToInterrupt(_tdsPin)); //we've finished sampling, so detach the interrupt function -- don't count any more pulses
  //detachInterrupt(1);
  
  //turn off the 555 system
  digitalWrite(ecPowerPin,LOW);
  
  if (pulseCount>0) { //use this logic in case something went wrong
  
  double durationS=totalDuration/double(pulseCount)/1000000.; //the total duration, in seconds, per pulse (note that totalDuration was in microseconds)
  
  // print out stats
  /*Serial.print("sampling period=");
  Serial.print(samplingPeriod);
    Serial.print(" sec; #pulses=");
  Serial.print(pulseCount);
  Serial.print("; duration per pulse (sec)=");
  */
  
  // print conductivity value
  Serial.print(durationS,4);
  Serial.print(", ");
  Serial.println(steinhart);
    
  }
  Temp = steinhart;
    
    ECcalculate();
}
  

void onPulse()
{
 
  pulseCount++;
//  Serial.print("pulsecount=");
//  Serial.println(pulseCount);
  lastTime = pulseTime;
  pulseTime = micros();
  duration=pulseTime-lastTime;
  totalDuration+=duration;
  //Serial.println(totalDuration);
}



void ECcalculate() {  //  Calculate the measurement

  float A;
  float B;
  float C;
  total = pulseCount;
  
  Serial.println("here");
  
  if (total < Y0)
    C = 0;
  else if (total >= Y0 && total < (Y0 + Y1)) {
    A = (Y1 - Y0) / (X1 - X0);
    B = Y0 - (A * X0);
    C = (total  - B) / A;
  }
  else if (total >= (Y0 + Y1) && total < (Y2 + Y1 + Y0)) {
    A = (Y2 - Y1) / (X2 - X1);
    B = Y1 - (A * X1);
    C = (total  - B) / A;
  }
  else if (total >= (Y2 + Y1 + Y0)) {
    A = (Y3 - Y2) / (X3 - X2);
    B = Y2 - (A * X2);
    C = (total - B) / A;
  }

  EC = (C / (1 + alphaLTC * (Temp - 25.00))); //  temperature compensation
  float tempF = convTempToFahrenheit(Temp);

    String ecString = "TDS:" + String(EC, 0)+ "," + String(tempF, 1) + "F";
    
    lcdPrintLine(0, ecString);

  Serial.println(' ');
  Serial.print("  t ");
  Serial.print(Temp, 1);
  Serial.print("*C ");
  Serial.print(" , ");
  Serial.print(tempF, 1);
  Serial.print("*F ");
  Serial.print("  EC ");
  Serial.print(EC, 2);
  Serial.print("   PPM ");
  Serial.print(EC * 500, 0);
  Serial.print("   Frequency ");
  Serial.print(total);
  Serial.println(" Hz");
}
double convTempToFahrenheit(double temp) {
    float vIn = Volts;//3.1;//5;
    if (vIn < 5.0) {
        float voltDiff = 5.0 - vIn; //0, 1 ,2
        vIn = 5.0 + voltDiff;
    }

    double  tempF = (temp * 9.0) / vIn + 32.0;
    return tempF;
}

//const uint8_t frqpin = 5; // digital pin #5
//const uint32_t oneSecond = 1000;
//uint32_t timer = 0;
//uint32_t sts = 0;
//const uint32_t c = 3000; // wait for 3000 pulses
//uint32_t ets = 0;
//void setup() {
// Serial.begin(9600);
// pinMode(frqpin,INPUT);
// digitalWrite(frqpin,HIGH); // pullup
//}
//void loop() {
// pulseIn(frqpin,LOW);
// sts = micros(); // start time stamp
//  for (uint32_t i=c; i>0; i--)
//   pulseIn(frqpin,HIGH);
// ets = micros(); // end time stamp
// Serial.print("$");
// Serial.println((c*1e6/(ets-sts))); // output Hz
//}